category code {
  (* builtin_types: redefinition builtin of types. *)
  builtin_types = true;

  (* catch_all: catch of all exceptions. *)
  catch_all = true;

  (* complex_condition: complex if/while/when conditions. *)
  complex_condition = {
    maximum = 5; (* maximum number of boolean operators. *)
  };

  (* deprecated: deprecated elements. *)
  deprecated = true;

  (* empty_for: empty 'for' constructs. *)
  empty_for = true;

  (* empty_try: empty 'try' constructs. *)
  empty_try = true;

  (* empty_while: empty 'while' constructs. *)
  empty_while = true;

  (* idempotent_operations: detects some idempotent operations. *)
  idempotent_operations = true;

  (* identifier_length: identifiers that are too short. *)
  identifier_length = {
    exclude_common = true; (* exclude common names from check. *)
    minimum = 2; (* minimum identifier length. *)
  };

  (* ignore_unit: ignore of unit expression. *)
  ignore_unit = true;

  (* length: elements that are too long. *)
  length = {
    maximum = 300; (* maximum number of lines. *)
  };

  (* magic_number: magic numbers. *)
  magic_number = true;

  (* negated_if: negated 'if' condition. *)
  negated_if = true;

  (* nested_for: nested 'for' constructs. *)
  nested_for = {
    maximum = 3; (* maximum nested for loops. *)
  };

  (* nested_if: nested 'if' constructs. *)
  nested_if = {
    maximum = 8; (* maximum paths. *)
  };

  (* nested_try: nested 'try' constructs. *)
  nested_try = {
    maximum = 3; (* maximum nested try constructs. *)
  };

  (* nested_while: nested 'while' constructs. *)
  nested_while = {
    maximum = 3; (* maximum nested while loops. *)
  };

  (* no_effect_assignment: detects assignments with no effect. *)
  no_effect_assignment = true;

  (* open: open statements. *)
  open = {
    allowed_modules = []; (* modules allowed in open statements. *)
  };

  (* parameter_count: functions with too many parameters. *)
  parameter_count = {
    maximum = 8; (* maximum number of parameters. *)
  };

  (* physical_comparisons: detects physical comparisons. *)
  physical_comparisons = true;

  (* predefined_exceptions: redefinition of predefined exceptions. *)
  predefined_exceptions = true;

  (* predefined_operators: redefinition predefined of operators. *)
  predefined_operators = true;

  (* string_literals: duplicate string literals. *)
  string_literals = {
    exclude_empty = true; (* whether the empty string should be ignored. *)
    threshold = 1; (* threshold for report. *)
  };

  (* textual_duplicate: textual duplicates. *)
  textual_duplicate = {
    offset = 0; (* number of lines to ignore at file start. *)
    trim_lines = false; (* whether to remove leading and trailing whitespaces. *)
    window = 10; (* minimum size of duplicates. *)
  };

  (* tuple_size: lengthy tuples. *)
  tuple_size = {
    maximum = 4; (* maximum number of members. *)
  };

  (* useless_binding: detects useless bindings. *)
  useless_binding = true;

  (* useless_external_parentheses: useless external parentheses. *)
  useless_external_parentheses = true;

}


category documentation {
  (* class_comment: enforce presence of class comments. *)
  class_comment = {
    strict = false; (* whether empty comment should be rejected. *)
  };

  (* class_type_comment: enforce presence of class type comments. *)
  class_type_comment = {
    strict = false; (* whether empty comment should be rejected. *)
  };

  (* exception_comment: enforce presence of exception comments. *)
  exception_comment = {
    strict = false; (* whether empty comment should be rejected. *)
  };

  (* module_comment: enforce presence of module comments. *)
  module_comment = {
    require_author = false; (* enforce presence of @author tag (toplevel only). *)
    require_version = false; (* enforce presence of @version tag (toplevel only). *)
    strict = false; (* whether empty comment should be rejected. *)
  };

  (* module_type_comment: enforce presence of module type comments. *)
  module_type_comment = {
    strict = false; (* whether empty comment should be rejected. *)
  };

  (* spell: spell-check the text of ocamldoc comments. *)
  spell = {
    dictionary = "en"; (* dictionary identifier. *)
    path = "aspell"; (* path to aspell-compatible executable. *)
  };

  (* type_comment: enforce presence of type comments. *)
  type_comment = {
    strict = false; (* whether empty comment should be rejected. *)
  };

  (* value_comment: enforce presence of value comments. *)
  value_comment = {
    strict = false; (* whether empty comment should be rejected. *)
  };

}


category interface {
  (* duplicate: detect duplicate entries in signatures. *)
  duplicate = true;

  (* exported_count: presence of complex structures. *)
  exported_count = {
    maximum = 32; (* maximum exported elements. *)
  };

  (* exported_empty: presence of empty structures. *)
  exported_empty = true;

  (* method_count: presence of complex classes. *)
  method_count = {
    maximum = 32; (* maximum class elements. *)
  };

}


category metrics {
  (* coupling: computes dependencies. *)
  coupling = true;

  (* halstead: Halstead complexity. *)
  halstead = true;

  (* mccabe: McCabe complexity. *)
  mccabe = true;

}


category miscellaneous {
  (* regexp: regular expression matching. *)
  regexp = {
    case_sensitive = true; (* whether regular expression matching is case sensitive. *)
    expr = ""; (* regular expression to match. *)
    level = error; (* report level ('info', 'warning', or 'error'). *)
    threshold = 0; (* threshold (number of line matches) for report. *)
  };

}


category typography {
  (* file_length: long files. *)
  file_length = {
    maximum = 500; (* maximum file length. *)
  };

  (* header: coherent headers for source files. *)
  header = {
    file = "/dev/null"; (* path to header file. *)
  };

  (* line_length: long lines. *)
  line_length = {
    maximum = 80; (* maximum line length. *)
  };

  (* spaces_around_blocks: white spaces around block delimiters. *)
  spaces_around_blocks = true;

  (* spaces_around_operators: white spaces around operators. *)
  spaces_around_operators = true;

  (* spaces_around_punctuation: white spaces around punctuation signs. *)
  spaces_around_punctuation = true;

  (* tab_character: tabulation character. *)
  tab_character = true;

  (* trailing_new_line: end-of-file newline. *)
  trailing_new_line = true;

  (* trailing_white_space: end-of-line whitespace. *)
  trailing_white_space = {
    tolerance = 0; (* how many whitespace characters may be tolerated. *)
  };

}


